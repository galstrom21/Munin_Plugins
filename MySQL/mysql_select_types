#!/usr/bin/perl
#
# Copyright (C) 2008 Rackspace US, Inc. <http://www.rackspace.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses/gpl.txt
#
#
# This plugin graphs the rate of queries that had to queue up
# while waiting on a table_lock to be released
# 
# This variable is applicable to MyISAM and Memory table types
# 
# http://dev.mysql.com/doc/refman/5.0/en/internal-locking.html
#
# To enable, link mysql_select_types to this file. E.g.
#
#    ln -s /usr/share/node/node/plugins/mysql_select_types /etc/munin/plugins/mysql_select_types
#
# Revision 1.0  2008/11/21
# Created by Justin Shepherd <jshepher@rackspace.com>
#
# Parameters:
#
#   config
#   autoconf
#
# Configuration variables
#
#   mysqlopts     - Options to pass to mysql
#   mysqladmin    - Override location of mysqladmin
#
#%# family=auto
#%# capabilities=autoconf

use strict;

# Define the mysqladmin paths, and commands
my $MYSQLADMIN = $ENV{mysqladmin} || "mysqladmin";
my $TEST_COMMAND    = "$MYSQLADMIN $ENV{mysqlopts} ping";
my $MYSQL_VARIABLES = "$MYSQLADMIN $ENV{mysqlopts} extended-status variables";

# Pull in any arguments
my $arg = shift();

# Check to see how the script was called 
if ($arg eq 'config') {
    print_graph_information();
    exit();
} elsif ($arg eq 'autoconf') {
    if (test_service()) { print "yes\n"; }
    else { print "no\n"; }
    exit;
} else {
	# Gather the values from mysqladmin
	my $full_join = poll_variables($MYSQL_VARIABLES,"Select_full_join");
	my $full_range_join = poll_variables($MYSQL_VARIABLES,"Select_full_range_join");
	my $range = poll_variables($MYSQL_VARIABLES,"Select_range");
	my $range_check = poll_variables($MYSQL_VARIABLES,"Select_range_check");
	my $scan = poll_variables($MYSQL_VARIABLES,"Select_scan");

	# Return the values to Munin
	print "full_join.value $full_join\n";
	print "full_range_join.value $full_range_join\n";
	print "range.value $range\n";
	print "range_check.value $range_check\n";
	print "scan.value $scan\n";
}


sub poll_variables {
	my $command = shift;
	my $expression = shift;
	my $ret = 0;
	open(SERVICE, "$command |")
  		or die("Coult not execute '$command': $!");
	while (<SERVICE>) {
            my ($field, $value) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	    next unless ($field);
	    if ($field eq $expression ) {
		$ret = "$value";
	    }
	}
	close(SERVICE);
	return $ret;
}


sub print_graph_information {
print <<EOM;
graph_title MySQL Select Query Types
graph_args --base 1000 -l 0
graph_scale no
graph_vlabel Select Types / \${graph_period}
graph_category mysql
graph_order full_join full_range_join range range_check scan 
full_join.label Full Join
full_join.draw LINE2
full_join.type DERIVE
full_range_join.label Full Range Join
full_range_join.draw LINE2
full_range_join.type DERIVE
range.label Range
range.draw LINE2
range.type DERIVE
range_check.label Range Check
range_check.draw LINE2
range_check.type DERIVE
scan.label Scan
scan.draw LINE2
scan.type DERIVE
EOM
}


sub test_service {
    my $return = 1;
    system ("$MYSQLADMIN --version >/dev/null 2>/dev/null");
    if ($? == 0)
    {
	system ("$TEST_COMMAND >/dev/null 2>/dev/null");
	if ($? == 0)
	{
	    print "yes\n";
	    $return = 0;
	}
	else
	{
	    print "no (could not connect to mysql)\n";
	}
    }
    else
    {
	print "no (mysqladmin not found)\n";
    }
    exit $return;
}
