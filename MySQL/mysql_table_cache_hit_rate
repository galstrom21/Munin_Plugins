#!/usr/bin/perl
#
# Copyright (C) 2008 Rackspace US, Inc. <http://www.rackspace.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses/gpl.txt
#
#
# To enable, link mysql_connections to this file. E.g.
#
#    ln -s /usr/share/node/node/plugins/mysql_table_cache_hit_rate /etc/munin/plugins/mysql_table_cache_hit_rate
#
# Revision 1.0  2007/08/03
# Created by Justin Shepherd <jshepher@rackspace.com>
#
# Parameters:
#
#   config
#   autoconf
#
# Configuration variables
#
#   mysqlopts     - Options to pass to mysql
#   mysqladmin    - Override location of mysqladmin
#
#%# family=auto
#%# capabilities=autoconf

use strict;

# Define the mysqladmin paths, and commands
my $MYSQLADMIN = $ENV{mysqladmin} || "mysqladmin";
my $TEST_COMMAND    = "$MYSQLADMIN $ENV{mysqlopts} extended-status";
my $MYSQL_VARIABLES = "$MYSQLADMIN $ENV{mysqlopts} extended-status variables";
my $warning = $ENV{warning} || "80";
my $critical = $ENV{critical} || "90";

# Pull in any arguments
my $arg = shift();

# Check to see how the script was called 
if ($arg eq 'config') {
    print_graph_information();
    exit();
} elsif ($arg eq 'autoconf') {
    if (test_service()) { print "yes\n"; }
    else { print "no\n"; }
    exit;
} else {
	# Gather the values from mysqladmin
	my $open_tables = poll_variables($MYSQL_VARIABLES,"Open_tables");
	my $opened_tables = poll_variables($MYSQL_VARIABLES,"Opened_tables");

	my $table_cache_hit_rate = `echo "scale=3; ($open_tables / $opened_tables) * 100" | bc`;
	chomp($table_cache_hit_rate);

	# Check for <1 value
        if ($table_cache_hit_rate < 1) {
                # Return 1 to Munin
                print "hit_rate.value 1\n";
        }
        else {
                # Return the value to Munin
                print "hit_rate.value $table_cache_hit_rate\n";
        }
}


sub poll_variables {
	my $command = shift;
	my $expression = shift;
	my $ret = 0;
	open(SERVICE, "$command |")
  		or die("Coult not execute '$command': $!");
	while (<SERVICE>) {
            my ($field, $value) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	    next unless ($field);
	    if ($field eq $expression ) {
		$ret = "$value";
	    }
	}
	close(SERVICE);
	return $ret;
}


sub print_graph_information {
print <<EOM;
graph_title MySQL Table Cache Hit Rate
graph_args --base 1000 -l 0
graph_vlabel Table Cache Hit Rate (%)
graph_scale no
graph_category mysql
graph_order hit_rate
hit_rate.label Table Cache Hit Rate
hit_rate.draw LINE2
hit_rate.info The effictive rate of the MySQL table_cache.
EOM
}


sub test_service {
    my $return = 1;
    system ("$MYSQLADMIN --version >/dev/null 2>/dev/null");
    if ($? == 0)
    {
	system ("$TEST_COMMAND >/dev/null 2>/dev/null");
	if ($? == 0)
	{
	    print "yes\n";
	    $return = 0;
	}
	else
	{
	    print "no (could not connect to mysql)\n";
	}
    }
    else
    {
	print "no (mysqladmin not found)\n";
    }
    exit $return;
}
