#!/usr/bin/perl
#
# Copyright (C) 2008 Rackspace US, Inc. <http://www.rackspace.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses/gpl.txt
#
#
# This plugin is based off of the Connection Usaged 
# section of the MySQL Connection Health Page
# 
# http://dev.mysql.com/doc/administrator/en/mysql-administrator-health-connection-health.html
#
# To enable, link mysql_connections to this file. E.g.
#
#    ln -s /usr/share/node/node/plugins/mysql_connections /etc/munin/plugins/mysql_connections
#
# Revision 1.0  2007/08/03
# Created by Justin Shepherd <jshepher@rackspace.com>
#
# Parameters:
#
#   config
#   autoconf
#
# Configuration variables
#
#   mysqlopts     - Options to pass to mysql
#   mysqladmin    - Override location of mysqladmin
#
#%# family=auto
#%# capabilities=autoconf

use strict;

# Define the mysqladmin paths, and commands
my $MYSQLADMIN = $ENV{mysqladmin} || "mysqladmin";
my $TEST_COMMAND    = "$MYSQLADMIN $ENV{mysqlopts} extended-status";
my $MYSQL_VARIABLES = "$MYSQLADMIN $ENV{mysqlopts} extended-status variables";

# Pull in any arguments
my $arg = shift();

# Check to see how the script was called 
if ($arg eq 'config') {
    print_graph_information();
    exit();
} elsif ($arg eq 'autoconf') {
    if (test_service()) { print "yes\n"; }
    else { print "no\n"; }
    exit;
} else {
	# Get the variables
	my $qcache_hits = poll_variables($MYSQL_VARIABLES,"Qcache_hits");
	my $com_select = poll_variables($MYSQL_VARIABLES,"Com_select");
	my $total_queries = $qcache_hits + $com_select;
	
	# Calculate the QCache Hit/Miss Percentages
	my $hit = (($qcache_hits / $total_queries) * 100);
	my $miss = 100 - $hit;
	
	print "hit.value $hit\n";
	print "miss.value $miss\n";
}


sub poll_variables {
	my $command = shift;
	my $expression = shift;
	my $ret = 0;

	open(SERVICE, "$command |")
  		or die("Coult not execute '$command': $!");

	while (<SERVICE>) {
            my ($field, $value) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	    next unless ($field);
	    if ($field eq $expression ) {
		$ret = "$value";
	    }
	}
	close(SERVICE);
	return $ret;
}


sub print_graph_information {
print <<EOM;
graph_title MySQL QCache Efficiency
graph_args --base 1000 -l 0 --upper-limit 100
graph_vlabel QCache Efficiency (%)
graph_category mysql
graph_order hit miss
hit.label QCache Hit
hit.draw AREA
hit.info Percentage of SELECT queries that utilize the query_cache
miss.label QCache Miss
miss.draw STACK
miss.info Percentage of SELECT queries that DID NOT utilize the query_cache
EOM
}


sub test_service {
    my $return = 1;
    system ("$MYSQLADMIN --version >/dev/null 2>/dev/null");
    if ($? == 0)
    {
	system ("$TEST_COMMAND >/dev/null 2>/dev/null");
	if ($? == 0)
	{
	    print "yes\n";
	    $return = 0;
	}
	else
	{
	    print "no (could not connect to mysql)\n";
	}
    }
    else
    {
	print "no (mysqladmin not found)\n";
    }
    exit $return;
}
