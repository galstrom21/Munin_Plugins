#!/usr/bin/perl
#
# Copyright (C) 2008 Rackspace US, Inc. <http://www.rackspace.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see http://www.gnu.org/licenses/gpl.txt
#
#
# This plugin is based off of the Connection Usaged 
# section of the MySQL Connection Health Page
# 
# http://dev.mysql.com/doc/administrator/en/mysql-administrator-health-connection-health.html
#
# To enable, link mysql_innodb_operations to this file. E.g.
#
#    ln -s /usr/share/node/node/plugins/mysql_innodb_operations /etc/munin/plugins/mysql_innodb_operations
#
# Revision 1.0  2007/08/03
# Created by Justin Shepherd <jshepher@rackspace.com>
#
# Parameters:
#
#   config
#   autoconf
#
# Configuration variables
#
#   mysqlopts     - Options to pass to mysql
#   mysqladmin    - Override location of mysqladmin
#
#%# family=auto
#%# capabilities=autoconf

use strict;

# Define the mysqladmin paths, and commands
my $MYSQLADMIN = $ENV{mysqladmin} || "mysqladmin";
my $TEST_COMMAND    = "$MYSQLADMIN $ENV{mysqlopts} extended-status";
my $MYSQL_VARIABLES = "$MYSQLADMIN $ENV{mysqlopts} extended-status variables";
# my $warning = $ENV{warning} || "80";
# my $critical = $ENV{critical} || "90";

# Pull in any arguments
my $arg = shift();

# Check to see how the script was called 
if ($arg eq 'config') {
    print_graph_information();
    exit();
} elsif ($arg eq 'autoconf') {
    if (test_service()) { print "yes\n"; }
    else { print "no\n"; }
    exit;
} else {
	# Gather the values from mysqladmin
	my $reads = poll_variables($MYSQL_VARIABLES,"Innodb_rows_read");
	my $deletes = poll_variables($MYSQL_VARIABLES,"Innodb_rows_deleted");
	my $inserts = poll_variables($MYSQL_VARIABLES,"Innodb_rows_inserted");
	my $updates = poll_variables($MYSQL_VARIABLES,"Innodb_rows_updated");

	# Return the values to Munin
	print "read.value $reads\n";
	print "deleted.value $deletes\n";
	print "inserted.value $inserts\n";
	print "updated.value $updates\n";
}


sub poll_variables {
	my $command = shift;
	my $expression = shift;
	my $ret = 0;
	open(SERVICE, "$command |")
  		or die("Coult not execute '$command': $!");
	while (<SERVICE>) {
            my ($field, $value) = (m/(\w+).*?(\d+(?:\.\d+)?)/);
	    next unless ($field);
	    if ($field eq $expression ) {
		$ret = "$value";
	    }
	}
	close(SERVICE);
	return $ret;
}


sub print_graph_information {
print <<EOM;
graph_title InnoDB Row Operations
graph_args --base 1000 -l 0
graph_vlabel Rows Per \${graph_period}
graph_category mysql
graph_order read deleted inserted updated
read.label Rows Read
read.draw AREA 
read.type DERIVE
read.info The number of rows read from InnoDB tables.
deleted.label Rows Deleted
deleted.draw STACK 
deleted.type DERIVE
deleted.info The number of rows deleted from InnoDB tables.
inserted.label Rows Inserted
inserted.draw STACK 
inserted.type DERIVE
inserted.info The number of rows inserted into InnoDB tables.
updated.label Rows Updated
updated.draw STACK 
updated.type DERIVE
updated.info The number of rows updated in InnoDB tables.
EOM
}

sub test_service {
    my $return = 1;
    system ("$MYSQLADMIN --version >/dev/null 2>/dev/null");
    if ($? == 0)
    {
	system ("$TEST_COMMAND >/dev/null 2>/dev/null");
	if ($? == 0)
	{
	    if (innodb_enabled()) {
		print "yes\n";
	    	$return = 0;
	    } else {
		print "no (InnoDB is not enabled)\n";
	    }
	}
	else
	{
	    print "no (could not connect to mysql)\n";
	}
    }
    else
    {
	print "no (mysqladmin not found)\n";
    }
    exit $return;
}

sub innodb_enabled {
        my $ret = 0;
        my $out = `mysql $ENV{mysqlopts} -e "show variables like 'have_innodb';" | tail -1`;
        chomp($out);
        my ($tmp, $binlog) = split /\s/,$out,2;
        if ($binlog eq "YES") {
                $ret = 1;
        }
        return $ret;
}

